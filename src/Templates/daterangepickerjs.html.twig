<script type="text/javascript" src="/js/moment.js"></script>
<script type="text/javascript" src="/js/daterangepicker.js"></script>
<script type="text/javascript" src="/js/daterangepicker-options.js"></script>
<script type="text/javascript">
$('input[name="daterange"]').daterangepicker(daterangepickerOptions,
    function(start, end, label) {
        $("#dateFrom").val(start.format('YYYY-MM-DD HH:mm:ss'));
        $("#dateTo").val(end.format('YYYY-MM-DD HH:mm:ss'));
    }
);
$('input[name="daterange"]').on('apply.daterangepicker', function(ev, picker) {
    console.log("apply");
    var _fromDate = moment(picker.startDate, 'YYYY-MM-DD');
    var _toDate = moment(picker.endDate, 'YYYY-MM-DD');
    var dateDiff = _toDate.diff(_fromDate, 'days');
    var type;
    if (dateDiff < 95) {
      type = 'day';
    } else if (dateDiff < 600) {
      type = 'month';
    } else {
      type = 'year'
    }
    $("#dateRangeType").val(type);
});
</script>

{% if criteria.date_from and criteria.date_to %}
<script type="text/javascript">
$(document).ready(function() {
    var picker = $('input[name="daterange"]').data('daterangepicker');
    picker.setStartDate(moment($("#dateFrom").val()));
    picker.setEndDate(moment($("#dateTo").val()));
    window.filterTags = {{ criteria|json_encode|raw }};
});
</script>
{% else %}
<script type="text/javascript">
$(document).ready(function() {
    $('input[name="daterange"]').val('');
});
</script>
{% endif %}

<script type="text/javascript">
$(document).ready(function($) {
    var normalizeFilterParams = function (filters) {
        var target = {};
        for (var key in filters) {
            if (filters.hasOwnProperty(key)) {
                switch (key) {
                    case 'date_from':
                        target["date"] = filters["date_from"]; break;
                    case 'date_to':
                        (!target["date"]) && (target["date"] = "");
                        target["date"] += " - " + filters["date_to"]; break;
                    default: target[key] = filters[key]; break;
                }
            }
        }

        return target;
    };

    var normalizedFilterTags = normalizeFilterParams(window.filterTags);

    for (tag in normalizedFilterTags) {
        if (normalizedFilterTags.hasOwnProperty(tag)) {
            if (tag == 'type') {
                continue;
            }
            var newTag = $('<span></span>')
                .addClass("badge badge-info mr-2")
                .html(tag + ": " + normalizedFilterTags[tag]);
            $("#filterTags").append(newTag);
        }
    }

    if (Object.keys(filterTags).length <= 0) {
        $("#resetFilters").hide();
    }

    $("#resetFilters").on('click', function(){
        $('input[name="daterange"]').val('');
        $("#dateFrom").val('');
        $("#dateTo").val('');
        $("#filtersForm").find(":submit")
            .removeClass("btn-info")
            .addClass("btn-secondary")
            .trigger("click");
        ;
    });
});
</script>
